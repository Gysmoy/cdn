JSON.parseable = function (e) { try { return JSON.parse(e) } catch (t) { return !1 } }, JSON.flatten = function (e, t = ".", l = "") { let n = {}; for (let r in e) { let i = Number.isInteger(Number(r)) ? "[" + r + "]" : "" === l ? r : t + r; if (Array.isArray(e[r]) || "object" == typeof e[r]) { let f = JSON.flatten(e[r], t, l + i); for (let s in f) n[s] = f[s] } else n[l + i] = e[r] } return n }, JSON.unflatten = function (e, t = ".") { let l = {}; for (let n in e) { let r = n.split(t); r = r.map(e => e.replace(/\\./g, ".").replace(/\\\[/g, "[").replace(/\\\]/g, "]")); let i = l; for (let f = 0; f < r.length; f++) { let s = r[f]; if (s.includes("[") && s.endsWith("]")) { let o = parseInt(s.slice(s.indexOf("[") + 1, s.length - 1)); for (i[s = s.slice(0, s.indexOf("["))] || (i[s] = []); i[s].length <= o;)i[s].push({}); f === r.length - 1 ? i[s][o] = e[n] : (i[s][o] || (i[s][o] = {}), i = i[s][o]) } else f === r.length - 1 ? i[s] = e[n] : (i[s] || (i[s] = {}), i = i[s]) } } return l }, JSON.take = function (e, t) { return e.slice(0, t) }, JSON.fromCSV = function (e, t = ",", l = !1) { let n = String(e).trim().split("\n"), r = [], i = RegExp("[^a-zA-Z0-9\xd1\xf1\xc1\xe1\xc9\xe9\xcd\xed\xd3\xf3\xda\xfa\xdc\xfc\\s]", "g"), f = n[0].split(t).map(e => l ? e.split(".").map(e => e.trim()).filter(Boolean).join(".") : e.replace(i, "").split(" ").filter(Boolean).join(" ").trim()), s = RegExp(`${t}(?=(?:(?:[^"]*"){2})*[^"]*$)`); for (let o = 1; o < n.length; o++) { let p = {}, a = n[o].split(s).map(e => e.trim().replace(/^"(.*)"$/, "$1")); if (a.some(e => "" !== e)) { for (let c = 0; c < f.length; c++)p[f[c]] = a[c]; r.push(p) } } return r }, JSON.isNested = function (e) { for (let t in e) { let l = e[t]; if (null != l && "object" == typeof l) return !0 } return !1 };