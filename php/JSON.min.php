<?php class JSON{static public function parse(string $text):array{$array=json_decode($text,true);return $array;}static public function stringify(mixed $object,bool $pretty=false):string{if($pretty){$string=json_encode($object,JSON_PRETTY_PRINT);}else{$string=json_encode($object);}return $string;}static public function parseable(mixed $text):bool{json_decode($text);return(json_last_error()==JSON_ERROR_NONE);}static public function flatten($obj,$notation='.',$prefix='',$flattenLastArray=true){return array_reduce(array_keys($obj),function($acc,$k)use($notation,$prefix,$flattenLastArray,$obj){$pre=strlen($prefix)?$prefix.$notation:'';if(is_array($obj[$k])){if($flattenLastArray&&!is_array($obj[$k][0])){foreach($obj[$k]as $i=>$item){$acc[$pre.$k.'['.$i.']']=$item;}}else{$acc[$pre.$k]=$obj[$k];}}else if(is_object($obj[$k])){$acc+=JSON::flatten((array) $obj[$k],$notation,$pre.$k,$flattenLastArray);}else{$acc[$pre.$k]=$obj[$k];}return $acc;},[]);}static public function unflatten($obj,$notation='.'){$result=[];foreach($obj as $key=>$value){$keys=explode($notation,$key);$cur=&$result;foreach($keys as $i=>$prop){if(strpos($prop,'[')!==false&&strpos($prop,']')===strlen($prop)-1){$index=intval(substr($prop,strpos($prop,'[')+1,-1));$prop=substr($prop,0,strpos($prop,'['));if(!isset($cur[$prop])){$cur[$prop]=[];}while(count($cur[$prop])<$index){$cur[$prop][]=[];}if($i===count($keys)-1){$cur[$prop][$index]=$value;}else{if(!isset($cur[$prop][$index])){$cur[$prop][$index]=[];}$cur=&$cur[$prop][$index];}}else{if($i===count($keys)-1){$cur[$prop]=$value;}else{if(!isset($cur[$prop])){$cur[$prop]=[];}$cur=&$cur[$prop];}}}unset($cur);}return $result;}static public function take($obj,$quantity){return array_slice($obj,0,$quantity);}}